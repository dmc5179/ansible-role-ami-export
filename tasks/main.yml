---
# tasks file for ami-export

- name: Get snapshot ID of target AMI
  delegate_to: localhost
  amazon.aws.ec2_ami_info:
    aws_access_key: "{{ ansible_env.AWS_ACCESS_KEY_ID | default(omit) }}"
    aws_secret_key: "{{ ansible_env.AWS_SECRET_ACCESS_KEY | default(omit) }}"
    security_token: "{{ ansible_env.AWS_SESSION_TOKEN | default(omit) }}"
    region: "{{ ansible_env.AWS_DEFAULT_REGION | default(omit) }}"
    ec2_url: '{{ aws_ec2_url | default(omit) }}'
    validate_certs: '{{ aws_ssl_enabled }}'
    image_ids: '{{ ami_id }}'
  register: ami_info

- name: Set snapshot ID fact
  delegate_to: localhost
  ansible.builtin.set_fact:
    snapshot_id: "{{ ami_info.images[0].block_device_mappings[0].ebs.snapshot_id }}"
    volume_size: "{{ ami_info.images[0].block_device_mappings[0].ebs.volume_size }}"

- name: Create temp instance
  delegate_to: localhost
  community.aws.ec2_instance:
    aws_access_key: "{{ ansible_env.AWS_ACCESS_KEY_ID | default(omit) }}"
    aws_secret_key: "{{ ansible_env.AWS_SECRET_ACCESS_KEY | default(omit) }}"
    security_token: "{{ ansible_env.AWS_SESSION_TOKEN | default(omit) }}"
    region: "{{ ansible_env.AWS_DEFAULT_REGION | default(omit) }}"
    ec2_url: '{{ aws_ec2_url | default(omit) }}'
    validate_certs: '{{ aws_ssl_enabled }}'
    image_id: '{{ temp_ami_id }}'
    wait: true
    name: "Temporary instance for exporting an AMI"
    instance_role: '{{ iam_instance_profile }}'
    key_name: '{{ key_name }}'
    vpc_subnet_id: '{{ vpc_subnet_id }}'
    security_groups: "{{ security_groups }}"
    instance_type: '{{ instance_type }}'
    ebs_optimized: true
    purge_tags: false
    network:
      assign_public_ip: true
    volumes:
      - device_name: /dev/sda1
        ebs:
          volume_size: '{{ 100|int + volume_size|int }}'
          volume_type: gp3
          delete_on_termination: true
    state: running
  register: temp_instance

- name: Wait for replace instance to finish booting
  delegate_to: localhost
  wait_for:
    timeout: 120

  #Note: Done separately to guarantee device name and order
- name: Attach snapshot to clone to temp instance
  delegate_to: localhost
  amazon.aws.ec2_vol:
    aws_access_key: "{{ ansible_env.AWS_ACCESS_KEY_ID | default(omit) }}"
    aws_secret_key: "{{ ansible_env.AWS_SECRET_ACCESS_KEY | default(omit) }}"
    security_token: "{{ ansible_env.AWS_SESSION_TOKEN | default(omit) }}"
    region: "{{ ansible_env.AWS_DEFAULT_REGION | default(omit) }}"
    ec2_url: '{{ aws_ec2_url | default(omit) }}'
    validate_certs: '{{ aws_ssl_enabled }}'
    instance: '{{ temp_instance.instances[0].instance_id }}'
    snapshot: '{{ snapshot_id }}'
    device_name: "/dev/sdf"
    volume_type: gp3
    delete_on_termination: true

- name: Refetch temp instance info
  delegate_to: localhost
  community.aws.ec2_instance_info:
    aws_access_key: "{{ ansible_env.AWS_ACCESS_KEY_ID | default(omit) }}"
    aws_secret_key: "{{ ansible_env.AWS_SECRET_ACCESS_KEY | default(omit) }}"
    security_token: "{{ ansible_env.AWS_SESSION_TOKEN | default(omit) }}"
    region: "{{ ansible_env.AWS_DEFAULT_REGION | default(omit) }}"
    ec2_url: '{{ aws_ec2_url | default(omit) }}'
    validate_certs: '{{ aws_ssl_enabled }}'
    instance_ids:
      - '{{ temp_instance.instances[0].instance_id }}'
  register: temp_instance

- name: Show temp instance info again
  debug:
    var: temp_instance

  # Get the name of the device created for the AMI snapshot ID
- name: Set device name and ansible_ssh_host facts
  ansible.builtin.set_fact:
    device_name: "{{ temp_instance.instances[0].block_device_mappings[1].device_name }}"
    ansible_ssh_host: "{{ temp_instance.instances[0].public_dns_name }}"

- name: Create a directory on the temp instance
  become: true
  ansible.builtin.file:
    name: "/opt/images"
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Install python3 for the aws cli
  become: true
  ansible.builtin.dnf:
    name: python3
    state: latest

- name: Install python3-pip for the aws cli
  become: true
  ansible.builtin.dnf:
    name: python3-pip
    state: latest

- name: Install aws cli python3 module for ec2-user
  ansible.builtin.pip:
    name: awscli
    executable: pip3
    extra_args: --user

- name: Install aws cli python3 module for ec2-user
  ansible.builtin.pip:
    name: boto3
    executable: pip3
    extra_args: --user

  #TODO: Should lookup the device name. Currently copying AMIs with 1 root volume
  #      so it will always be /dev/nvme1n1
- name: Clone the snapshot with dd
  become: true
  ansible.builtin.command: 'dd if=/dev/nvme1n1 of=/opt/images/{{ ami_id }}.raw bs=128M'

- name: Ensure ec2-user can read the file
  become: true
  ansible.builtin.file:
    path: "/opt/images/{{ ami_id }}.raw"
    owner: root
    group: root
    mode: '0644'

  # TODO: There is not a good way to copy the file from the remote host to S3
  # without pulling it down and then pushing it up to S3 or using the command module below
  # This requires an IAM role with s3 permissions be attached to the temp instance
- name: Copy the AMI RAW file to S3
  amazon.aws.s3_object:
    bucket: "{{ s3_bucket }}"
    object: "/{{ s3_path }}/{{ ami_id }}.raw"
    src: "/opt/images/{{ ami_id }}.raw"
    mode: put

  # TODO: Check that the instance terminates and all volumes are deleted
- name: Terminate the temporary instance
  delegate_to: localhost
  amazon.aws.ec2_instance:
    aws_access_key: "{{ ansible_env.AWS_ACCESS_KEY_ID | default(omit) }}"
    aws_secret_key: "{{ ansible_env.AWS_SECRET_ACCESS_KEY | default(omit) }}"
    security_token: "{{ ansible_env.AWS_SESSION_TOKEN | default(omit) }}"
    region: "{{ ansible_env.AWS_DEFAULT_REGION | default(omit) }}"
    ec2_url: '{{ aws_ec2_url | default(omit) }}'
    validate_certs: '{{ aws_ssl_enabled }}'
    state: absent
    wait: true
    instance_ids:
      - '{{ temp_instance.instances[0].instance_id }}'
